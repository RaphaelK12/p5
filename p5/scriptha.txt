===============================
   Script file hash commands
===============================

In a script, there is a function named "#" that can be used to control script execution.  This command does not exist as an actual function, it is processed by the script execution loop.  (So you won't see it in the help window, no matter how hard you look, and if you define a function named #, you won't be able to use it from a script without added complications.)  The (begin) function also uses these commands, in the same way.

(# comment.in)
    Begins a multi-line comment block.  ALL (#) commands are processed, even inside of comments.  If you need to comment out a large block of a file, the recommended way to do this is to define a label at the end and then (# skip) to it.

(# comment.out)
    Ends a multi-line comment block

(# error.abort)
    Sets error mode to 'abort'.  Any script line that results in an error will cause script processing to stop immediately.  This mode is the default.

(# error.cont)
    Sets error mode to 'continue'.  All errors generated by script lines will be ignored, and script processing will continue.

(# error.vcont)
    Sets error mode to 'verbose continue'.  All errors generated will be printed to the console, if one is open, and script processing will continue.

(# error.skip [label])
    Sets error mode to 'skip', meaning that if an error occurs, the script will advance to the given label and then continue as normal.  The atom \'lasterror\' will store the error string returned, or \"\" if no error occured.

(# error.vskip [label])
    Same as error.skip, but also prints errors to the console

(# label [label])
    Makes the line a script label.  Labels are limited to 255 characters.

(# return)
    Ends script processing successfully.

(# abort [message])
    Ends script processing immediately with a failure status.  The message is returned to the caller.

(# base)
    Causes the script to fail if there is any expression pending.  Use this to make sure that a long, complex s-expression is properly closed by putting this on the line following where it should end.  Intended mostly to aid in development.

(# paramcount [int])
    Specifies that the number of parameters given to the script must be at least equal to the given int.  This is just a shorthand for checking to see if every individual $x parameter you need is defined.  If the required number of parameters were not given, the script fails.

(# skip [label])
    Skips forward to the given label.  An error is raised if eof is hit before the label is.  Note that this overwrites the buffer used by error.skip, so you will need to have (# error.skip) again after (# skip) if you want it to keep working.

(# goto [label])
    Resets the file pointer to the beginning of the script file and then skips forward until [label] is found.

(# gotocount [int])
    Sets the goto count.  If more gotos than this are executed, infinite loop is assumed, and the script is aborted.  The default is 256.  Misuse of this command can defeat the infinite loop detector; use with care.


